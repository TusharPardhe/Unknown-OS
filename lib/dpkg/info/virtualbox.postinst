#!/bin/sh

set -e


# Automatically added by dhpython:
if which pycompile >/dev/null 2>&1; then
	pycompile -p virtualbox 
fi

if which pycompile >/dev/null 2>&1; then
	pycompile -p virtualbox /usr/lib/virtualbox -V 2.7
fi

# End automatically added section
# Automatically added by dh_systemd_enable
if deb-systemd-helper debian-installed vboxweb.service; then
	# This will only remove masks created by d-s-h on package removal.
	deb-systemd-helper unmask vboxweb.service >/dev/null || true

	if deb-systemd-helper --quiet was-enabled vboxweb.service; then
		# Create new symlinks, if any.
		deb-systemd-helper enable vboxweb.service >/dev/null || true
	fi
fi

# Update the statefile to add new symlinks (if any), which need to be cleaned
# up on purge. Also remove old symlinks.
deb-systemd-helper update-state vboxweb.service >/dev/null || true
# End automatically added section
# Automatically added by dh_installinit
if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ]; then
	if [ -x "/etc/init.d/virtualbox" ]; then
		update-rc.d virtualbox defaults >/dev/null || exit $?
	fi
fi
# End automatically added section
# Automatically added by dh_systemd_start
if [ -d /run/systemd/system ]; then
	systemctl --system daemon-reload >/dev/null || true
	deb-systemd-invoke start vboxweb.service >/dev/null || true
fi
# End automatically added section
# Automatically added by dh_installudev
if [ "$1" = configure ]; then
	if [ -e "/etc/udev/rules.d/z60_virtualbox.rules" ]; then
		echo "Preserving user changes to /etc/udev/rules.d/60-virtualbox.rules ..."
		if [ -e "/etc/udev/rules.d/60-virtualbox.rules" ]; then
			mv -f "/etc/udev/rules.d/60-virtualbox.rules" "/etc/udev/rules.d/60-virtualbox.rules.dpkg-new"
		fi
		mv -f "/etc/udev/rules.d/z60_virtualbox.rules" "/etc/udev/rules.d/60-virtualbox.rules"
	fi
fi
# End automatically added section


if [ "$1" = configure ]; then
	if [ -z `getent group vboxusers` ]; then
		addgroup --system --quiet vboxusers
	fi

	# Build usb device tree
	for i in /sys/bus/usb/devices/*; do
		if test -r "$i/dev"; then
			dev="`cat "$i/dev" 2> /dev/null || true`"
			major="`expr "$dev" : '\(.*\):' 2> /dev/null || true`"
			minor="`expr "$dev" : '.*:\(.*\)' 2> /dev/null || true`"
			class="`cat $i/bDeviceClass 2> /dev/null || true`"
			/lib/udev/VBoxCreateUSBNode.sh "$major" "$minor" "$class" vboxusers 2>/dev/null || true
		fi
	done

	# only restart if VirtualBox isn't running
	if test -x /etc/init.d/virtualbox && ! pidof VBoxSVC > /dev/null; then
		invoke-rc.d virtualbox restart || true
	fi
fi
